{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","usersResponse","json","users","this","console","error","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uWAGaA,G,YAAO,SAACC,GACnB,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,4BAAML,EAAMI,QAAQE,MACpB,2BAAKN,EAAMI,QAAQG,UCJZC,G,MAAW,SAACR,GACvB,OACE,yBAAKC,UAAU,aACZD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAGzB,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAAUA,GAAjC,WCNKQ,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,2BAAOb,UAAU,SAASc,KAAK,SAASF,YAAcA,EAAcG,SAAWF,MCoDpEG,E,kDApDb,aAAe,IAAD,8BACZ,gBAyBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAvBtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IANH,E,2MAekBI,MAAM,8C,cAA5BC,E,gBAEcA,EAAcC,O,OAA5BC,E,OAENC,KAAKT,SAAS,CAAEV,SAAUkB,I,kDAG1BE,QAAQC,MAAR,M,+IASK,MAE2BF,KAAKL,MAA/Bd,EAFD,EAECA,SAAUW,EAFX,EAEWA,YAKZW,EAAmBtB,EAASuB,QAAO,SAAA5B,GAAO,OAC9CA,EAAQE,KAAK2B,cAAcC,SAASd,EAAYa,kBAGlD,OACE,yBAAKhC,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWY,YAAY,kBAAkBC,aAAcc,KAAKd,eAC5D,kBAAC,EAAD,CAAUL,SAAWsB,S,GA/CXI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtB,GACLD,QAAQC,MAAMA,EAAMuB,c","file":"static/js/main.61d33eeb.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => {\n  return(\n    <div className=\"card-container\">\n      <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n      <h2>{ props.monster.name }</h2>\n      <p>{ props.monster.email }</p>\n    </div>\n  );\n}","import React from 'react';\nimport {Card} from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = (props) => { \n  return (\n    <div className='card-list'>\n      {props.monsters.map(monster => (\n        // Note: Having unique key helps identify which element associated with the state\n        //       change so that it can only rerender that element\n        <Card key={monster.id} monster={ monster }> </Card>\n      ))}\n    </div>);\n}","import React from 'react';\nimport './search-box.styles.css'\n\n// NOTE: Destructuring is used on props\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return(\n    <input className='search' type='search' placeholder={ placeholder } onChange={ handleChange }/>\n  )\n}","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    // State member variable \n    this.state = {\n      monsters: [ ],\n      searchField: ''\n    }\n  }\n\n  // When the component is rendered on the DOM for the first time, this function gets called\n  // NOTE: This is a lifecycle method\n  async componentDidMount() {\n    // Fetch resource at the URL\n    try {\n      const usersResponse = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n      // Convert into JSON object and await the promise\n      const users = await usersResponse.json();\n      // Set the state to the list of users which was obtained from the URL\n      this.setState({ monsters: users });\n    } catch(err) {\n      // Will catch any error in the try block\n      console.error(err);\n    }   \n  } \n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n\n  // As soon state changes, react \"bot\" calls this render function automatically\n  render() {\n    // Destructuring: Pulling individual properties\n    const { monsters, searchField } = this.state;\n\n    // NOTE: Any time setState is called and the properties change\n    //       React re-renders the component, that means the render function\n    //       gets called. So this section gets called.\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder='search monsters' handleChange={this.handleChange}/>\n        <CardList monsters={ filteredMonsters } />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}